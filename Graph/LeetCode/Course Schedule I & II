//https://leetcode.com/problems/course-schedule/description/

class Solution {
public:
    bool canFinish(int V, vector<vector<int>>& prerequisites) {
       
        vector<int>adj[V];
        for(auto it :prerequisites)
        adj[it[1]].push_back(it[0]); // think!
        queue<int>q;
        vector<int>indegree(V,0);
       
        for(int i=0;i<V;i++){
            for(auto it:adj[i])
            indegree[it]++;
        }
        for(int i=0;i<V;i++){
            if(indegree[i]==0)// should have single node with zero indegree 
            q.push(i);
        }
        int cnt=0;
        vector<int>topo;
        while(!q.empty()){
            int node=q.front();
            q.pop();
            topo.push_back(node);
            cnt++;
            for(auto it:adj[node]){
                indegree[it]--;
                if(indegree[it]==0)
                q.push(it);
            }
        }
        if(cnt==V)
        return true;
        else
        return false;
    }
};
