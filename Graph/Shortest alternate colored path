#include <queue>
void bfs(vector<int>&ans,vector<pair<int,int>>adj[],vector<vector<bool>>&vis){
 
    queue<vector<int>>q;
    q.push({0,0,-1});// node dist orecolor

    while(!q.empty()){
        vector<int>vec=q.front();
        int curr=vec[0];
        int dis=vec[1];
        int color=vec[2];

        q.pop();

        for(auto& it:adj[curr]){
            if(!vis[it.first][it.second] && it.second!=color){
                vis[it.first][it.second]=true;
                q.push({it.first,1+dis,it.second});
                if(ans[it.first]==-1){
                    ans[it.first]=1+dis;
                }
            }
        }
    }
}
vector<int> shortestAlternateColoredPath(int n, vector<vector<int>>& redEdges, vector<vector<int>>& blueEdges) 
{
    // Write your code here.
    vector<pair<int,int>>adj[n];
    for(int i=0;i<redEdges.size();i++){
        int u=redEdges[i][0];
        int v=redEdges[i][1];

        adj[u].push_back({v, 0});
    }
    // vector<int>adj2[n];
    for(int i=0;i<blueEdges.size();i++){
        int u=blueEdges[i][0];
        int v=blueEdges[i][1];

        adj[u].push_back({v, 1});
    }
    vector<int>ans(n,-1);//dis =-1
    vector<vector<bool>>vis(n,vector<bool>(2));
   
     vis[0][1]=true;
    vis[0][0]=true;
    ans[0]=0;
    // for(int i=0;i<n;i++){
    bfs(ans,adj,vis);
    // }
    
    return ans;

}
