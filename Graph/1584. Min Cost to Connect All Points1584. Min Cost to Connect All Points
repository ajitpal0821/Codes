class Solution {
public:
    int minCostConnectPoints(vector<vector<int>>& points) {
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        pq.push({0,0});// not effect
        int n=points.size();
        vector<bool>arr(n,false);

        int i=0;
        int ans=0;
        while(i<n){// we need n-1 edges only
            int wt=pq.top().first;
            int node=pq.top().second;
            pq.pop();

            if(arr[node])
            continue;

            arr[node]=true;
            ans+=wt;
            i++;
            for(int j=0;j<n;j++){
                if(!arr[j]){
                    int weight=abs(points[node][0]-points[j][0])
                    +abs(points[node][1]-points[j][1]);
                  
                    pq.push({weight,j});
                }
            }

        }

        return ans;

    }
};
