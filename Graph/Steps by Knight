class Solution 
{
    public:
    //Function to find out minimum steps Knight needs to reach target position.
	int minStepToReachTarget(vector<int>&KnightPos,vector<int>&TargetPos,int N)
	{
	    // Code here
	   // int n=KnightPos.size();
	   // int m=KnightPos
	    vector<vector<int>>vis(N,vector<int>(N,0));
	    queue<pair<pair<int,int>,int>>pq;
	    pq.push({{KnightPos[0]-1,KnightPos[1]-1},0});
	    int di=TargetPos[0]-1;
	    int dj=TargetPos[1]-1;
	    int r[]={-1,-1,-2,-2,1,1,2,2};
	    int c[]={2,-2,1,-1, 2,-2,1,-1};
	    int cnt=0;
	    int mini=INT_MAX;
	    vis[KnightPos[0]-1][KnightPos[1]-1]=1;
	    while(!pq.empty()){
	        
	            
	        int i=pq.front().first.first;
	        int j=pq.front().first.second;
	        int st=pq.front().second;
	        
	        
	                        *   |2     *
	                            |           
	                  *         |1          *      eight points take 
	                            |
	        --------------------|--------------------
	                   2    -1  |0     1    2
	                            |
	                   *        |-1         *
	                            |
	                         *  |-2     *
	                            |
	                            |
	        
	       // cnt++;
	        pq.pop();
	       if(di==i && dj==j)
	       return st;

	        for(int k=0;k<8;k++){
	            int nr=i+r[k];
	            int nc=j+c[k];
	            if(nr>=0 && nr<N && nc>=0 && nc<N && !vis[nr][nc]){
	               
	                vis[nr][nc]=1;
	                pq.push({{nr,nc},st+1});
	               
	            
	        }
	         
	        }
	    } 
	    return -1; 
	    
	}
};
