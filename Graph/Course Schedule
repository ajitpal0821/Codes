// https://practice.geeksforgeeks.org/problems/course-schedule/1

//Code:

class Solution
{
  public:
    vector<int> findOrder(int V, int m, vector<vector<int>> prerequisites) 
    {
        //code here
         vector<int>adj[V];
	    for(auto it:prerequisites)
	    adj[it[1]].push_back(it[0]);
	    
	     int indegree[V]={0};
        
        for(int i=0;i<V;i++){
            for(auto it:adj[i]){
                indegree[it]++;
            }
        }
        queue<int>q;
        for(int i=0;i<V;i++){
            if(indegree[i]==0)
            q.push(i);
        }
        int cnt=0;
        vector<int>topo;
        while(!q.empty()){
            int node=q.front();
            q.pop();
            topo.push_back(node);
            cnt++;
            for(auto it:adj[node]){
                indegree[it]--;
                if(indegree[it]==0)
                q.push(it);
            }
        }
            if(cnt==V) // i.e topo sort possible->DAG->no cycle ->yes
            return topo;
            else
            return {};
    }
};
