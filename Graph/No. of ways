int numberOfWays(int n, int m, vector<vector<int>> edges)
{
    // Write your code here
    vector<pair<int,int>>adj[n];
    for(int i=0;i<m;i++){
        int u=edges[i][0];
        int v=edges[i][1];
        int wt=edges[i][2];

        adj[u].push_back({v,wt});
        adj[v].push_back({u,wt});
    }
    priority_queue<pair<int, int>, vector<pair<int, int>>,
                   greater<pair<int, int>>>
        pq;
    vector<int> dis(n, 1e9);
    dis[0] = 0;
    vector<int> cnt(n, 0);
    cnt[0] = 1;
    const int mod=(int)(1e9+7);
    pq.push({0,0});
    while(!pq.empty()){
        int node=pq.top().second;
        int dist=pq.top().first;

        pq.pop();
        for(auto it:adj[node]){
            int adjNode=it.first;
            int adjdis=it.second;

            if(dis[adjNode]>dis[node]+adjdis){
                
                dis[adjNode]=dis[node]+adjdis;
                cnt[adjNode]=cnt[node]%mod;
                pq.push({dis[adjNode],adjNode});
        }

        else if( dis[adjNode]==dis[node]+adjdis){
            cnt[adjNode]=(cnt[adjNode]+cnt[node])%mod;
        }
        
        }
    }
    return cnt[n-1]%mod;
}
