class Solution {
public:
void dfs(vector<int>&vis,vector<int>adj[],int node){
    vis[node]=1;
    for(auto it:adj[node]){
        if(!vis[it])
        dfs(vis,adj,it);
    }
}
    int makeConnected(int n, vector<vector<int>>& connections) {
        // for n nodes we need n-1 edges--> minimum spanning tree
        int edges=connections.size();

        if(edges<n-1)
        return -1;
        vector<int>vis(n,0);
        vector<int>adj[n];
        for(auto it:connections){
            int u=it[0];
            int v=it[1];
            adj[u].push_back(v);
            adj[v].push_back(u);
            
        }
        int cnt=-1;// for fully connected 
        for(int i=0;i<n;i++){
            if(!vis[i]){
                cnt++;
            dfs(vis,adj,i);
            }

        }
return cnt;
    }
};
