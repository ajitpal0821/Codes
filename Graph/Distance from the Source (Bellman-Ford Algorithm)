// link:https://practice.geeksforgeeks.org/problems/distance-from-the-source-bellman-ford-algorithm/1
// help from striver
// this algorithm is same as dijsktra but it is used
//-in case of negative weights (n-1 iterations where n is no if nodes)
//-to detect negative cycles


class Solution {
  public:
    /*  Function to implement Bellman Ford
    *   edges: vector of vectors which represents the graph
    *   S: source vertex to start traversing graph with
    *   V: number of vertices
    */
    vector<int> bellman_ford(int V, vector<vector<int>>& edges, int S) {
        // Code here
        vector<int>dis(V,1e8);
        dis[S]=0;
        // to N-1 iterations
        for(int i=0;i<V-1;i++){
            for(auto it :edges){
                int u=it[0];
                int v=it[1];
                int wt=it[2];
                if(dis[u]!=1e8 && dis[u]+wt<dis[v]){
                    dis[v]=wt+dis[u];
                }
            }
        }
        // this is for Negative cycles
        for(auto it :edges){
                int u=it[0];
                int v=it[1];
                int wt=it[2];
                if(dis[u]!=1e8 && dis[u]+wt<dis[v]){
                   return {-1};
                }
            }
        return dis;
    }
};
