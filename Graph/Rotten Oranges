//link:https://practice.geeksforgeeks.org/problems/rotten-oranges2536/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article
// Help from striver

class Solution 
{
    public:
    //Function to find minimum time required to rot all oranges. 
    int orangesRotting(vector<vector<int>>& grid) {
        // Code here
        int n=grid.size();
        int m=grid[0].size();
        int fresh=0;
        queue<pair<pair<int,int>,int>>q;
        int vis[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==2)
                {
                    q.push({{i,j},0});
                    vis[i][j]=2;
                }
                else
                {
                    vis[i][j]=0;
                }
                if(grid[i][j]==1)
                fresh++;
            }
        }
        int tm=0;
        int delrow[]={-1,0,1,0};
        int delcol[]={0,1,0,-1};
        int cnt=0;
        
        while(!q.empty()){
        int r=q.front().first.first;
        int c=q.front().first.second;
        int t=q.front().second;
            tm=max(tm,t);
             q.pop();
             
             for(int i=0;i<4;i++){
            int nr=r+delrow[i];
            int nc=c+delcol[i];
            
            if(nr>=0 && nr<n && nc>=0 &&nc<m && vis[nr][nc]==0 &&grid[nr][nc]==1){
                q.push({{nr,nc},t+1});
                vis[nr][nc]=2;
                cnt++;
            }
            
             }
        }
        if(cnt!=fresh)
        return -1;
        
        return tm;
    }
};
