//https://practice.geeksforgeeks.org/problems/shortest-path-in-undirected-graph/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=direct-acyclic-graph
// help from striver

class Solution {
  public:
  void dfs(int node,vector<pair<int,int>>adj[],int vis[],stack<int>&st){
      vis[node]=1;
      for(auto it:adj[node]){
          int v=it.first;
          if(!vis[v]){
              dfs(v,adj,vis,st);
          }
      }
      st.push(node);
  }
     vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
        // code here
        // making adjacency list
        vector<pair<int,int>>adj[N];
        for(int i=0;i<M;i++){
            int u=edges[i][0];
            int v=edges[i][1];
            int wt=edges[i][2];
            adj[u].push_back({v,wt});
        }
        int vis[N]={0};
        stack<int>st;
        
        
        for(int i=0;i<N;i++){
            if(!vis[i]){
                dfs(i,adj,vis,st);
            }
        }
        vector < int > dis(N);
      for (int i = 0; i < N; i++) {
        dis[i] = 1e9;
      }
        dis[0]=0;
        // return dis;
        while(!st.empty()){
            int node=st.top();
            st.pop();
            
            for(auto it:adj[node]){
                int v=it.first;
                int wt=it.second;
                if(dis[node]+wt<dis[v]){
                    dis[v]=wt+dis[node];
                }
            }
        }
        for(int i=0;i<N;i++){
            if(dis[i]==1e9)
          dis[i]=-1;
        }
        return dis;
     }
};
