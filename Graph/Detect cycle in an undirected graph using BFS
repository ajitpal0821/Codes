// GFG link:https://practice.geeksforgeeks.org/problems/detect-cycle-in-an-undirected-graph/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article
// Help from striver


class Solution {
  public:
  bool detect(int src,vector<int>adj[],int vis[]){
         vis[src]=1;
        
        queue<pair<int,int>>q; // for storing node,parent
        
        q.push({src,-1});
        while(!q.empty()){
            int node=q.front().first;
            int parent=q.front().second;
            q.pop();
            
            for(auto it:adj[node]){
                if(vis[it]==0){
                    
                    vis[it]=1;
                    q.push({it,node});
                }
                else if(parent!=it){
                    return true;        // if it is not from same node but visited therefore cycle
                }
            }
        }
        return false;
      
  }
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        // int
        int vis[V]={0};
        for(int i=0;i<V;i++){           // it is done in case of connected components
            if(!vis[i]){
                if(detect(i,adj,vis)==true)
                return true;
            }
        }
            return false;
    }
};
