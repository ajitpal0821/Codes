// link:https://practice.geeksforgeeks.org/problems/topological-sort/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article
//GFG problem
// help from striver

class Solution
{
	public:
	void dfs(int node,vector<int> adj[],int vis[],stack<int>&st){
	    vis[node]=1;
	    for(auto it:adj[node]){
	        if(!vis[it])
	        dfs(it,adj,vis,st);
	    }
	    st.push(node);
	    
	}
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    // code here
	    int vis[V]={0};
	    stack<int>st;
	    for(int i=0;i<V;i++){   // for connected components
	        if(!vis[i])
	        dfs(i,adj,vis,st);
	    }
	    vector<int>ans;
	   while(!st.empty()){
	       ans.push_back(st.top());   // taking out from stack
	       st.pop();
	   }
	   return ans;
	}
};
