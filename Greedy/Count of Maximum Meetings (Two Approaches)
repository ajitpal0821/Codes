// 1st Approach (Without Comparator)
int maximumActivities(vector<int> &start, vector<int> &finish) {
    // Write your code here.
    vector<pair<int,int>>p;
    for(int i=0;i<start.size();i++){
      p.push_back({finish[i],start[i]});
    }
    sort(p.begin(),p.end());
    int end=-1,c=0;
    for(int i=0;i<start.size();i++){
        if(p[i].second>=end){
            c++;
            end=p[i].first;
        }
    }
    return c;
}

// 2nd (With Comparator)

#include <bits/stdc++.h> 
 bool cmp(const pair<int,int>&a , const pair<int,int>&b){
     if(a.second<b.second)
     return true;
     else
     return false;
}
int maximumActivities(vector<int> &start, vector<int> &finish) {
    // Write your code here.
    vector<pair<int,int>>p;
    for(int i=0;i<start.size();i++){
      p.push_back({start[i],finish[i]});
    }
    sort(p.begin(),p.end(),cmp);
    int end=-1,c=0;
    for(int i=0;i<start.size();i++){
        if(p[i].first>=end){
            c++;
            end=p[i].second;
        }
    }
    return c;
}
