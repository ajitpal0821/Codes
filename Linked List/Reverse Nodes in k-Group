//Code:


class Solution {
public:
 bool possible(ListNode* head, int k){
        int length = 0;
        ListNode* temp = head;

        while(temp != NULL){
            temp=temp->next;
            length++;

            // If at any point, length become greater than K, then return true
            if(length >= k){
                return true;
            }
        }

        return false;
    }
    ListNode* reverseKGroup(ListNode* head, int k) {
        struct ListNode*temp=head,*prev=NULL,*ford=NULL,*newd;
        int c=0,len=0;

        if(!possible(head, k)){
            return head;
        }

        while(temp && c<k){
            ford=temp->next;
            temp->next=prev;
            prev=temp;
            temp=ford;
            c++;
        }// no need for head=prev
       
        if(ford  ){
            head->next=reverseKGroup(ford,k);

        }
      

            return prev;

    }
};

//TC:O(n)
//SC:O(1)
