// LeetCode:https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/description/
// Tip: No. of Deletions == No. of Insertions = m-length of LCS



class Solution {
public:
    int minInsertions(string A) {
        int n=A.length();
        string B=string(A.rbegin(),A.rend());
        int dp[n+1][n+1];
        for(int i=0;i<n+1;i++){
            for(int j=0;j<n+1;j++){
                if(j==0 or i==0)
                dp[i][j]=0;
            }
        }
        for(int i=1;i<n+1;i++){
            for(int j=1;j<n+1;j++){
                if(A[i-1]==B[j-1]){
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else
                dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        }
        return n-dp[n][n];
    }
};
